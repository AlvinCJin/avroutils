#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


import sys
import os

import optparse

import csv

from avro import schema, io

VERSION="0.1"

def createOptionParser():
  """ Create an command line options parser that supports options for various types of delimiter seperated files. """
  usage = "Usage: %prog [options] INPUTFILES... OUTPUTFILE"
  version = "%prog " + VERSION
  parser = optparse.OptionParser(usage=usage, version=version)
  parser.add_option('-d', '--delimiter', dest='delimiter', default=',', help="Specify a delimiter for the CSV file's records. Default is comma (',').")
  parser.add_option('-f', '--header', dest='header', help="Specify that the first record in the CSV file is (or must be) a header.")
  parser.add_option('-r', '--reverse', dest='reverse', help="Convertread/write as.")
  parser.add_option('-s', '--schema-file', dest='schema', help="Specify a schema to read/write as.")
  parser.add_option('-n', '--record-name', dest='name', help="Specify a record name. Used when no schema file is provided. Default is the first input filename")
  return parser

def validateOptions(parser):
  """ Validate the options from the commandline and return the remaining options. """
  (opts, args) = parser.parse_args()

  # Perform any required validation
  if opts.schema:
    try:
      schema.parse(open(opts.schema))
    except:
      parser.error("Given schema %s is not a valid Avro schema." % opts.schema)

  return (opts, args)

def convertCsvToAvro(parser, opts, inputs, output):
  """ Read the CSV files and convert them to Avro. """

  # If we got a schema to use, lets use it.
  if opts.schema:
    try:
      outputSchema = schema.parse(open(opts.schema))
    except:
      parser.error("Given schema is invalid. Please provide a proper Avro schema")
  else:
    # We don't have a schema.
    # We'll sniff 5 MB of the CSV data and gather what we can.
    firstFile = open(inputs[0])
    sampleData = firstFile.read(5*1024) # TODO: Make this configurable as an advanced option.
    firstFile.seek(0)
    header = firstFile.readline()
    firstFile.close()

    # Check if we have a header at least?
    if csv.Sniffer().has_header(sampleData):
      dialect = csv.Sniffer().sniff(sampleData)
    else:
      parser.error("The input CSV files don't carry a header. Please provide a schema file or a proper CSV input file with headers.")

    # Construct the schema
    name = inputs[0]
    if opts.name:
      name = opts.name
    # outputSchema = schema.RecordSchema('record', name)
    for fieldName in header.split(dialect.delimiter):
      pass
      #fieldList.append(Field())

def convertAvroToCsv(opts, inputs, output):
  pass

def main():
  parser = createOptionParser()

  (opts, args) = validateOptions(parser)

  if not len(args) > 1:
    parser.error('You must specify an input and an output filename.')

  inputs = args[:-1]
  output = args[-1]

  if opts.reverse:
    convertAvroToCsv(parser, opts, inputs, output)
  else:
    convertCsvToAvro(parser, opts, inputs, output)


if __name__=='__main__':
  main()
